// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
  // output          = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum TypeCVPreview {
  pdf
  website
}

enum UserStatus {
  active
  inactive
  blocked
  process_verification
}

model AppGroupUser {
  id     Int    @id @default(autoincrement())
  code   String @unique @db.VarChar(50)
  name   String @db.VarChar(100)
  status String @default("active")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  user         Users[]
  access_modul AppAccessModul[]
  access_menu  AppAccessMenu[]

  @@map("app_group_user")
}

model AppAccessMenu {
  id                String @id @default(uuid())
  app_group_user_id Int
  app_modul_id      Int
  app_menu_id       Int
  allowed_access    Json?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  app_group_user AppGroupUser @relation(fields: [app_group_user_id], references: [id], onDelete: Cascade)
  app_modul      AppModul     @relation(fields: [app_modul_id], references: [id], onDelete: Cascade)
  app_menu       AppMenu      @relation(fields: [app_menu_id], references: [id], onDelete: Cascade)

  @@map("app_access_menu")
}

model AppMenu {
  id                 Int     @id @default(autoincrement())
  app_modul_id       Int
  app_menu_id_parent Int?
  code               String  @db.VarChar(50)
  name               String  @db.VarChar(100)
  route              String  @db.VarChar(100)
  order              Int     @default(0)
  icon               String?
  status             String  @default("active")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  app_modul      AppModul        @relation(fields: [app_modul_id], references: [id], onDelete: Cascade)
  menu_parent    AppMenu?        @relation(name: "parent_children", fields: [app_menu_id_parent], references: [id], onDelete: Cascade)
  menu_childrens AppMenu[]       @relation(name: "parent_children")
  access_menu    AppAccessMenu[]

  @@map("app_menu")
}

model AppAccessModul {
  id                String @id @default(uuid())
  app_group_user_id Int
  app_modul_id      Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  app_group_user AppGroupUser @relation(fields: [app_group_user_id], references: [id], onDelete: Cascade)
  app_modul      AppModul     @relation(fields: [app_modul_id], references: [id], onDelete: Cascade)

  @@map("app_access_modul")
}

model AppModul {
  id      Int     @id @default(autoincrement())
  code    String  @unique @db.VarChar(50)
  name    String  @db.VarChar(100)
  order   Int     @default(0) @db.Int
  pattern String  @unique @db.VarChar(255)
  icon    String? @db.VarChar(100)
  status  String  @default("active")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  menus        AppMenu[]
  access_modul AppAccessModul[]
  access_menu  AppAccessMenu[]

  @@map("app_modul")
}

model Documentation {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  code        String   @unique @db.VarChar(50)
  job_id      Int
  birth_date  DateTime
  money       Decimal  @db.Decimal(19, 4)
  hobbies     Json
  description String?  @db.Text()
  status      String   @default("active")
  image       String?  @db.Text
  file        String?  @db.Text
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  created_by  Int?
  updated_by  Int?

  job MasterData @relation(fields: [job_id], references: [id], onDelete: Cascade)

  @@map("documentation")
}

model MasterCategory {
  id                 Int     @id @default(autoincrement())
  master_category_id Int?
  code               String  @unique @db.VarChar(50)
  name               String  @db.VarChar(100)
  description        String? @db.Text
  status             String  @default("active")

  /// Template
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  /// Relationship
  master_category_parent   MasterCategory?  @relation(name: "category", fields: [master_category_id], references: [id], onDelete: Cascade)
  master_category_children MasterCategory[] @relation(name: "category")
  master_datas             MasterData[]

  @@map("master_category")
}

model MasterData {
  id                   Int     @id @default(autoincrement())
  master_data_id       Int?
  master_category_id   Int
  master_category_code String  @db.VarChar(50)
  code                 String  @unique @db.VarChar(50)
  name                 String  @db.VarChar(100)
  order                Int     @default(0)
  description          String? @db.Text
  status               String  @default("active")
  parameter1_key       String? @db.VarChar(50)
  parameter1_value     String? @db.VarChar(50)
  parameter2_key       String? @db.VarChar(50)
  parameter2_value     String? @db.VarChar(50)
  parameter3_key       String? @db.VarChar(50)
  parameter3_value     String? @db.VarChar(50)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  master_category      MasterCategory      @relation(fields: [master_category_id], references: [id], onDelete: Cascade)
  master_data_parent   MasterData?         @relation(name: "master_data", fields: [master_data_id], references: [id], onDelete: Cascade)
  master_data_children MasterData[]        @relation(name: "master_data")
  jobs_documentation   Documentation[]
  cv_skill             CVSkill[]
  cv_preview           CVPreview[]
  cv_template_website  CVTemplateWebsite[]
  cv_template_pdf      CVTemplatePDF[]

  @@map("master_data")
}

model Parameter {
  id     Int    @id @default(autoincrement())
  name   String @db.VarChar(100)
  code   String @unique @db.VarChar(50)
  value  String @db.Text
  status String @default("active")

  /// Template
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  @@map("parameter")
}

model Users {
  id                Int        @id @default(autoincrement())
  app_group_user_id Int
  name              String?    @db.VarChar(100)
  email             String     @unique @db.VarChar(100)
  username          String     @unique @db.VarChar(50)
  password          String     @db.Text
  status            UserStatus @default(inactive)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  app_group_user       AppGroupUser           @relation(fields: [app_group_user_id], references: [id], onDelete: Cascade)
  CVProfile            CVProfile?
  CVEducation          CVEducation[]
  CVExperience         CVExperience[]
  CVSkill              CVSkill[]
  CVPortfolio          CVPortfolio[]
  CVLicenseCertificate CVLicenseCertificate[]
  CVPreview            CVPreview[]
  CVContact            CVContact[]
  CVTemplateWebsite    CVTemplateWebsite?
  CVTemplatePDF        CVTemplatePDF?

  @@map("users")
}

//! Aplikasi

model CVContact {
  id             String   @id @default(uuid())
  users_id       Int
  email_sender   String   @db.Text()
  subject_sender String   @db.Text()
  content_sender String   @db.Text()
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  created_by     Int?
  updated_by     Int?

  user Users @relation(fields: [users_id], references: [id], onDelete: Cascade)

  @@map("cv_contact")
}

model CVEducation {
  id             String    @id @default(uuid())
  users_id       Int
  name           String    @db.VarChar(100) // SMK Negeri 1 Kota Bekasi
  major          String    @db.VarChar(100) // System Information 
  field_of_study String    @db.VarChar(100) // Vocational High School, Associate Degree
  start_date     DateTime
  end_date       DateTime?
  is_graduated   Boolean   @default(false)
  image          String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  user Users @relation(fields: [users_id], references: [id], onDelete: Cascade)

  @@map("cv_education")
}

model CVExperience {
  id            String    @id @default(uuid())
  users_id      Int
  company       String    @db.VarChar(100)
  job           String    @db.VarChar(100)
  start_date    DateTime
  end_date      DateTime?
  description   String?   @db.LongText()
  image_company String?   @db.Text()
  is_graduated  Boolean   @default(false)
  tags          Json?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  created_by    Int?
  updated_by    Int?

  user Users @relation(fields: [users_id], references: [id], onDelete: Cascade)

  @@map("cv_experience")
}

model CVLicenseCertificate {
  id         String    @id @default(uuid())
  users_id   Int
  name       String    @db.VarChar(100)
  publisher  String    @db.VarChar(100)
  start_date DateTime
  end_date   DateTime?
  is_expired Boolean   @default(false)
  url        String?   @db.Text()
  file       String?   @db.Text()
  credential String?   @db.Text()
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  created_by Int?
  updated_by Int?

  user Users @relation(fields: [users_id], references: [id], onDelete: Cascade)

  @@map("cv_license_certificate")
}

model CVPortfolio {
  id          String           @id @default(uuid())
  users_id    Int
  title       String           @db.VarChar(100)
  slug        String           @db.VarChar(100)
  description String           @db.LongText()
  thumbnail   String?          @db.Text()
  tags        Json?
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  created_by  Int?
  updated_by  Int?
  user        Users            @relation(fields: [users_id], references: [id], onDelete: Cascade)
  urls        CVPortfolioUrl[]

  /// Make Slug uniq only when same user create duplicate slug
  /// example : user | slug
  /// user1 | my-application
  /// user2 | my-application
  /// Above example still work, because although slug has same name but the user is different
  @@unique([users_id, slug])
  @@map("cv_portfolio")
}

model CVPortfolioUrl {
  id             String   @id @default(uuid())
  users_id       Int
  cvportfolio_id String
  name           String   @db.VarChar(100)
  url            String   @db.Text()
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  created_by     Int?
  updated_by     Int?

  portfolio CVPortfolio @relation(fields: [cvportfolio_id], references: [id], onDelete: Cascade)

  @@map("cv_portfolio_url")
}

model CVPreview {
  id               String        @id @default(uuid())
  users_id         Int
  code_template_id Int
  type             TypeCVPreview
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  created_by       Int?
  updated_by       Int?

  user            Users      @relation(fields: [users_id], references: [id], onDelete: Cascade)
  master_template MasterData @relation(fields: [code_template_id], references: [id], onDelete: Cascade)

  @@map("cv_preview")
}

model CVProfile {
  id            String   @id @default(uuid())
  users_id      Int      @unique
  motto         String   @db.Text()
  description   String?  @db.LongText()
  phone         String?
  web           String?
  twitter       String?
  facebook      String?
  instagram     String?
  linkedIn      String?
  github        String?
  address       String?
  image         String?  @db.Text()
  banner_image  String?  @db.Text()
  latest_resume String?  @db.Text()
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  created_by    Int?
  updated_by    Int?

  user Users @relation(fields: [users_id], references: [id], onDelete: Cascade)

  @@map("cv_profile")
}

model CVSkill {
  id         String   @id @default(uuid())
  users_id   Int
  name       String   @db.VarChar(100)
  level_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  user  Users      @relation(fields: [users_id], references: [id], onDelete: Cascade)
  level MasterData @relation(fields: [level_id], references: [id], onDelete: Cascade)

  @@map("cv_skill")
}

model CVTemplatePDF {
  id              String   @id @default(uuid())
  users_id        Int      @unique
  template_pdf_id Int
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  created_by      Int?
  updated_by      Int?

  template_pdf MasterData @relation(fields: [template_pdf_id], references: [id])
  user         Users      @relation(fields: [users_id], references: [id], onDelete: Cascade)

  @@map("cv_template_pdf")
}

model CVTemplateWebsite {
  id                  String   @id @default(uuid())
  users_id            Int      @unique
  template_website_id Int
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  created_by          Int?
  updated_by          Int?

  template_website MasterData @relation(fields: [template_website_id], references: [id])
  user             Users      @relation(fields: [users_id], references: [id], onDelete: Cascade)

  @@map("cv_template_website")
}
